{"version":3,"sources":["Cell.js","SapperIcon.js","FlagToggle.js","FlagCounter.js","Reset.js","Board.js","Game.js","serviceWorker.js","index.js"],"names":["Cell","createClassNames","props","hasMine","nearbyMines","isRevealed","isEmpty","isFlagged","this","x","y","classNames","className","onMouseDown","onClick","PureComponent","SapperIcon","isGameFinished","didUserWin","appearance","face","eyes","mouth","modifier","feature","Component","FlagToggle","isOn","FlagCounter","flagsLeft","Reset","Board","createEmptyBoard","height","width","emptyBoard","push","getRandomNumber","maxNumber","Math","floor","random","plantMines","board","mines","minesPlanted","randomX","randomY","findNeighbouringCells","neighbours","countNearbyMines","i","j","cell","forEach","revealBoard","state","map","row","setState","getHidden","hidden","filter","length","revealEmpty","toggleClickAction","e","clickAction","revealCell","finishGame","flagCell","alert","handleClick","reveal","flag","createNewGame","componentDidMount","msg","console","log","Fragment","rowIndex","key","Game","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d47e7e89.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Cell.scss';\r\n\r\nclass Cell extends PureComponent {\r\n\tcreateClassNames = () => {\r\n\t\tconst { hasMine, nearbyMines, isRevealed, isEmpty, isFlagged } = this.props;\r\n\r\n\t\tif (isFlagged) {\r\n\t\t\treturn 'cell_flagged';\r\n\t\t}\r\n\r\n\t\tif (isRevealed) {\r\n\t\t\tif (isEmpty) {\r\n\t\t\t\treturn 'cell_empty';\r\n\t\t\t} else if (hasMine) {\r\n\t\t\t\treturn 'cell_mine';\r\n\t\t\t} else {\r\n\t\t\t\tswitch (nearbyMines) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\treturn 'cell_1-nearby';\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\treturn 'cell_2-nearby';\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\treturn 'cell_3-nearby';\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn 'cell_many-nearby';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 'cell';\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { x, y, nearbyMines, isRevealed } = this.props;\r\n\r\n\t\tconst classNames = this.createClassNames();\r\n\r\n\t\treturn (\r\n\t\t\t<div className={classNames} onMouseDown={() => this.props.onClick(x, y)}>\r\n\t\t\t\t{isRevealed && nearbyMines ? nearbyMines : null}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nCell.propTypes = {\r\n\tonClick        : PropTypes.func,\r\n\tisGameFinished : PropTypes.bool,\r\n\tx              : PropTypes.number,\r\n\ty              : PropTypes.number,\r\n\thasMine        : PropTypes.bool,\r\n\tnearbyMines    : PropTypes.number,\r\n\tisRevealed     : PropTypes.bool,\r\n\tisEmpty        : PropTypes.bool,\r\n\tisFlagged      : PropTypes.bool\r\n};\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SapperIcon.scss';\r\n\r\nclass SapperIcon extends Component {\r\n\trender() {\r\n\t\tconst { isGameFinished, didUserWin } = this.props;\r\n\r\n\t\tconst appearance = {\r\n\t\t\tface  : 'sapper-face',\r\n\t\t\teyes  : 'sapper-eyes',\r\n\t\t\tmouth : 'sapper-mouth'\r\n\t\t};\r\n\r\n\t\tif (isGameFinished) {\r\n\t\t\tconst modifier = didUserWin ? '_win' : '_loose';\r\n\r\n\t\t\tfor (let feature in appearance) {\r\n\t\t\t\tappearance[feature] += modifier;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst { face, eyes, mouth } = appearance;\r\n\r\n\t\treturn (\r\n\t\t\t<div className={face}>\r\n\t\t\t\t<div className={eyes} />\r\n\t\t\t\t<div className={mouth} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nSapperIcon.propTypes = {\r\n\tisGameFinished : PropTypes.bool,\r\n\tdidUserWin     : PropTypes.bool\r\n};\r\n\r\nexport default SapperIcon;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './FlagToggle.scss';\r\n\r\nclass FlagToggle extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={'flag-toggle-container'} onClick={this.props.onClick}>\r\n\t\t\t\t<div className={`flag-toggle ${this.props.isOn ? 'isOn' : ''}`} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nFlagToggle.propTypes = {\r\n\tonClick : PropTypes.func\r\n};\r\n\r\nexport default FlagToggle;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './FlagCounter.scss';\r\n\r\nclass FlagCounter extends Component {\r\n\trender() {\r\n\t\tconst flagsLeft = this.props.flagsLeft;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"flag-counter\">\r\n\t\t\t\t<span>{flagsLeft}</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nFlagCounter.propTypes = {\r\n\tflagsLeft : PropTypes.number\r\n};\r\n\r\nexport default FlagCounter;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Reset.scss';\r\n\r\nclass Reset extends Component {\r\n\trender() {\r\n\t\tconst didUserWin = this.props.didUserWin;\r\n\t\treturn (\r\n\t\t\t<div className={`reset ${didUserWin ? 'reset_win' : 'reset_loose'}`} onClick={this.props.onClick}>\r\n\t\t\t\tPlay again\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nReset.propTypes = {\r\n\tdidUserWin : PropTypes.bool,\r\n\tonClick    : PropTypes.func\r\n};\r\n\r\nexport default Reset;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from './Cell';\r\nimport SapperIcon from './SapperIcon';\r\nimport FlagToggle from './FlagToggle';\r\nimport FlagCounter from './FlagCounter';\r\nimport Reset from './Reset';\r\nimport './Board.scss';\r\n\r\nclass Board extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tboard          : [],\r\n\t\t\tisGameFinished : false,\r\n\t\t\tdidUserWin     : false,\r\n\t\t\tclickAction    : 'reveal',\r\n\t\t\tflagsLeft      : props.mines\r\n\t\t};\r\n\t}\r\n\r\n\tcreateEmptyBoard = () => {\r\n\t\tconst { height, width } = this.props;\r\n\t\tconst emptyBoard = [];\r\n\t\tfor (let x = 0; x < width; x++) {\r\n\t\t\temptyBoard.push([]);\r\n\t\t\tfor (let y = 0; y < height; y++) {\r\n\t\t\t\temptyBoard[x][y] = {\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty,\r\n\t\t\t\t\thasMine     : false,\r\n\t\t\t\t\tnearbyMines : 0,\r\n\t\t\t\t\tisRevealed  : false,\r\n\t\t\t\t\tisEmpty     : false,\r\n\t\t\t\t\tisFlagged   : false\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn emptyBoard;\r\n\t};\r\n\r\n\t// get random number from 0 to maxNumber (exclusive)\r\n\tgetRandomNumber = (maxNumber) => Math.floor(Math.random() * maxNumber);\r\n\r\n\tplantMines = (board) => {\r\n\t\tconst { width, height, mines } = this.props;\r\n\r\n\t\tlet minesPlanted = 0;\r\n\r\n\t\twhile (minesPlanted < mines) {\r\n\t\t\tconst randomX = this.getRandomNumber(height);\r\n\t\t\tconst randomY = this.getRandomNumber(width);\r\n\r\n\t\t\tif (!board[randomX][randomY].hasMine) {\r\n\t\t\t\tboard[randomX][randomY].hasMine = true;\r\n\t\t\t\tminesPlanted++;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tfindNeighbouringCells = (x, y, board) => {\r\n\t\tconst neighbours = [];\r\n\r\n\t\t// top\r\n\t\tif (x > 0) {\r\n\t\t\tneighbours.push(board[x - 1][y]);\r\n\t\t}\r\n\r\n\t\t// bottom\r\n\t\tif (x < this.props.height - 1) {\r\n\t\t\tneighbours.push(board[x + 1][y]);\r\n\t\t}\r\n\r\n\t\t// left\r\n\t\tif (y > 0) {\r\n\t\t\tneighbours.push(board[x][y - 1]);\r\n\t\t}\r\n\r\n\t\t// right\r\n\t\tif (y < this.props.width - 1) {\r\n\t\t\tneighbours.push(board[x][y + 1]);\r\n\t\t}\r\n\r\n\t\t// top-left\r\n\t\tif (x > 0 && y > 0) {\r\n\t\t\tneighbours.push(board[x - 1][y - 1]);\r\n\t\t}\r\n\r\n\t\t// top-right\r\n\t\tif (x > 0 && y < this.props.width - 1) {\r\n\t\t\tneighbours.push(board[x - 1][y + 1]);\r\n\t\t}\r\n\r\n\t\t// bottom-right\r\n\t\tif (x < this.props.height - 1 && y < this.props.width - 1) {\r\n\t\t\tneighbours.push(board[x + 1][y + 1]);\r\n\t\t}\r\n\r\n\t\t// bottom-left\r\n\t\tif (x < this.props.height - 1 && y > 0) {\r\n\t\t\tneighbours.push(board[x + 1][y - 1]);\r\n\t\t}\r\n\r\n\t\treturn neighbours;\r\n\t};\r\n\r\n\tcountNearbyMines = (board) => {\r\n\t\tconst { width, height } = this.props;\r\n\r\n\t\tfor (let i = 0; i < height; i++) {\r\n\t\t\tfor (let j = 0; j < width; j++) {\r\n\t\t\t\tconst cell = board[i][j];\r\n\t\t\t\tif (!cell.hasMine) {\r\n\t\t\t\t\tlet nearbyMines = 0;\r\n\t\t\t\t\tconst neighbourhood = this.findNeighbouringCells(cell.x, cell.y, board);\r\n\r\n\t\t\t\t\tneighbourhood.forEach((cell) => {\r\n\t\t\t\t\t\tif (cell.hasMine) nearbyMines++;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (nearbyMines === 0) {\r\n\t\t\t\t\t\tcell.isEmpty = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcell.nearbyMines = nearbyMines;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\trevealBoard = () => {\r\n\t\tconst board = [\r\n\t\t\t...this.state.board\r\n\t\t].map((row) => row.map((cell) => (cell.isRevealed = true)));\r\n\r\n\t\tthis.setState({\r\n\t\t\tboard\r\n\t\t});\r\n\t};\r\n\r\n\tgetHidden = (board) => {\r\n\t\tlet hidden = 0;\r\n\r\n\t\tboard.forEach((row) => {\r\n\t\t\thidden += row.filter((cell) => cell.isRevealed === false).length;\r\n\t\t});\r\n\r\n\t\treturn hidden;\r\n\t};\r\n\r\n\trevealEmpty = (x, y, board) => {\r\n\t\tconst area = this.findNeighbouringCells(x, y, board);\r\n\r\n\t\tarea.forEach((cell) => {\r\n\t\t\tif (!cell.isFlagged && !cell.isRevealed && (cell.isEmpty || !cell.hasMine)) {\r\n\t\t\t\tboard[cell.x][cell.y].isRevealed = true;\r\n\t\t\t\tif (cell.isEmpty) {\r\n\t\t\t\t\tthis.revealEmpty(cell.x, cell.y, board);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\ttoggleClickAction = (e) => {\r\n\t\tconst clickAction = this.state.clickAction === 'reveal' ? 'flag' : 'reveal';\r\n\r\n\t\tthis.setState({\r\n\t\t\tclickAction\r\n\t\t});\r\n\t};\r\n\r\n\trevealCell = (x, y) => {\r\n\t\tconst board = this.state.board;\r\n\t\tconst cell = board[x][y];\r\n\r\n\t\tif (cell.isFlagged) return;\r\n\r\n\t\tif (cell.hasMine) {\r\n\t\t\tthis.finishGame();\r\n\t\t}\r\n\r\n\t\tcell.isRevealed = true;\r\n\r\n\t\tif (cell.isEmpty) {\r\n\t\t\tthis.revealEmpty(x, y, board);\r\n\t\t}\r\n\r\n\t\tif (this.getHidden(board) === this.props.mines) {\r\n\t\t\tthis.finishGame(true);\r\n\t\t}\r\n\t};\r\n\r\n\tflagCell = (x, y) => {\r\n\t\tconst board = this.state.board;\r\n\t\tconst flagsLeft = this.state.flagsLeft;\r\n\r\n\t\tif (!flagsLeft && !board[x][y].isFlagged) {\r\n\t\t\talert('no more flags left...');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tboard[x][y].isFlagged = !board[x][y].isFlagged;\r\n\r\n\t\tthis.setState({\r\n\t\t\tflagsLeft : board[x][y].isFlagged ? flagsLeft - 1 : flagsLeft + 1\r\n\t\t});\r\n\t};\r\n\r\n\tfinishGame(didUserWin = false) {\r\n\t\tconst msg = didUserWin ? 'You won! :)' : 'You looooose :(';\r\n\t\tconsole.log(msg);\r\n\r\n\t\tthis.revealBoard();\r\n\r\n\t\tthis.setState({\r\n\t\t\tdidUserWin,\r\n\t\t\tisGameFinished : true\r\n\t\t});\r\n\t}\r\n\r\n\thandleClick = (x, y) => {\r\n\t\tconst board = this.state.board;\r\n\t\tconst cell = board[x][y];\r\n\r\n\t\tif (cell.isRevealed) return;\r\n\r\n\t\tconst clickHandlers = {\r\n\t\t\treveal : this.revealCell,\r\n\t\t\tflag   : this.flagCell\r\n\t\t};\r\n\r\n\t\tclickHandlers[this.state.clickAction](x, y);\r\n\r\n\t\tthis.setState({\r\n\t\t\tboard\r\n\t\t});\r\n\t};\r\n\r\n\tcreateNewGame = () => {\r\n\t\tconst board = this.createEmptyBoard();\r\n\r\n\t\tthis.plantMines(board);\r\n\t\tthis.countNearbyMines(board);\r\n\r\n\t\tthis.setState({\r\n\t\t\tboard,\r\n\t\t\tisGameFinished : false,\r\n\t\t\tdidUserWin     : false,\r\n\t\t\tclickAction    : 'reveal',\r\n\t\t\tflagsLeft      : this.props.mines\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.createNewGame();\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { board, isGameFinished, didUserWin, clickAction } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className=\"header\">\r\n\t\t\t\t\t{this.state.isGameFinished ? (\r\n\t\t\t\t\t\t<Reset onClick={this.createNewGame} didUserWin={this.state.didUserWin} />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<FlagToggle onClick={this.toggleClickAction} isOn={clickAction === 'flag'} />\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<SapperIcon isGameFinished={isGameFinished} didUserWin={didUserWin} />\r\n\t\t\t\t\t<FlagCounter flagsLeft={this.state.flagsLeft} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board\">\r\n\t\t\t\t\t{board.map((row, rowIndex) => (\r\n\t\t\t\t\t\t<div className=\"board-row\" key={rowIndex}>\r\n\t\t\t\t\t\t\t{row.map((cell) => (\r\n\t\t\t\t\t\t\t\t<Cell\r\n\t\t\t\t\t\t\t\t\tonClick={this.handleClick}\r\n\t\t\t\t\t\t\t\t\tx={cell.x}\r\n\t\t\t\t\t\t\t\t\ty={cell.y}\r\n\t\t\t\t\t\t\t\t\thasMine={cell.hasMine}\r\n\t\t\t\t\t\t\t\t\tnearbyMines={cell.nearbyMines}\r\n\t\t\t\t\t\t\t\t\tisRevealed={cell.isRevealed}\r\n\t\t\t\t\t\t\t\t\tisEmpty={cell.isEmpty}\r\n\t\t\t\t\t\t\t\t\tisFlagged={cell.isFlagged}\r\n\t\t\t\t\t\t\t\t\tkey={cell.x * row.length + cell.y}\r\n\t\t\t\t\t\t\t\t\tisGameFinished={this.state.isGameFinished}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nBoard.propTypes = {\r\n\twidth  : PropTypes.number,\r\n\theight : PropTypes.number,\r\n\tmines  : PropTypes.number\r\n};\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport './Game.scss';\r\nimport Board from './Board';\r\n\r\nclass Game extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\theight : 10,\r\n\t\t\twidth  : 10,\r\n\t\t\tmines  : 10\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { height, width, mines } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<Board height={height} width={width} mines={mines} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Game;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './Game';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}